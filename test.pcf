let rec doble (x:Nat) : Nat = ifz x then 0 else succ (succ (doble (pred x)))

let rec ack (m:Nat) (n:Nat) : Nat =
  ifz m
  then succ n
  else (ifz n
    then ack (pred m) 1
    else ack (pred m) (ack m (pred n)))

let rec suma (m n:Nat) : Nat = 
  ifz n then m else suma (succ m) (pred n)

let rec resta (m n:Nat) : Nat =
  ifz n then m else resta (pred m) (pred n)

let add : Nat -> (Nat -> Nat) =
  fun (x:Nat) ->
    let f : Nat -> Nat = fun (y:Nat) -> x + y in
    f

let add5 : Nat -> Nat = add 5

let quince : Nat = print (add5 10)

let main:Nat = 15*15
